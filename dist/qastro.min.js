(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.QAstro = {}));
})(this, (function (exports) { 'use strict';

  // Rule: checkTitle
  function checkTitle(report) {
    const title = document.querySelector('title');
    if (!title || !title.textContent.trim()) {
      report({
        rule: 'checkTitle',
        message: 'Halaman tidak memiliki <title> yang jelas.'
      });
    }
  }

  // Rule: checkImageAlt
  function checkImageAlt(report) {
    const images = document.querySelectorAll('img');
    images.forEach(img => {
      if (!img.hasAttribute('alt') || !img.getAttribute('alt').trim()) {
        report({
          rule: 'checkImageAlt',
          message: 'Gambar tanpa atribut alt ditemukan.',
          element: img
        });
      }
    });
  }

  // Rule: checkFormLabel
  function checkFormLabel(report) {
    const inputs = document.querySelectorAll('input, select, textarea');
    inputs.forEach(input => {
      if (
        !input.hasAttribute('aria-label') &&
        !input.hasAttribute('aria-labelledby') &&
        !input.id || !document.querySelector(`label[for='${input.id}']`)
      ) {
        report({
          rule: 'checkFormLabel',
          message: 'Form input tanpa label ditemukan.',
          element: input
        });
      }
    });
  }

  // Rule: checkNoInlineScript
  function checkNoInlineScript(report) {
    const scripts = document.querySelectorAll('script');
    scripts.forEach(script => {
      if (!script.src && script.textContent.trim()) {
        report({
          rule: 'checkNoInlineScript',
          message: 'Inline <script> terdeteksi. Hindari inline script untuk keamanan.' ,
          element: script
        });
      }
    });
  }

  // Rule: checkNoInlineStyle
  function checkNoInlineStyle(report) {
    const elements = document.querySelectorAll('[style]');
    elements.forEach(el => {
      report({
        rule: 'checkNoInlineStyle',
        message: 'Inline style terdeteksi. Hindari penggunaan atribut style langsung.',
        element: el
      });
    });
  }

  // Rule: checkFormAutocomplete
  function checkFormAutocomplete(report) {
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      if (!form.hasAttribute('autocomplete')) {
        report({
          rule: 'checkFormAutocomplete',
          message: 'Form tanpa atribut autocomplete ditemukan.',
          element: form
        });
      }
    });
  }

  // Rule: checkMetaSecurity
  function checkMetaSecurity(report) {
    const metaCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    if (!metaCSP) {
      report({
        rule: 'checkMetaSecurity',
        message: 'Meta Content-Security-Policy tidak ditemukan.'
      });
    }
    const metaXFO = document.querySelector('meta[http-equiv="X-Frame-Options"]');
    if (!metaXFO) {
      report({
        rule: 'checkMetaSecurity',
        message: 'Meta X-Frame-Options tidak ditemukan.'
      });
    }
  }

  // Rule: checkPasswordAutocomplete
  function checkPasswordAutocomplete(report) {
    const pwFields = document.querySelectorAll('input[type="password"]');
    pwFields.forEach(input => {
      const ac = input.getAttribute('autocomplete');
      if (!ac || ac === 'on') {
        report({
          rule: 'checkPasswordAutocomplete',
          message: 'Field password sebaiknya menonaktifkan autofill dengan autocomplete="new-password".',
          element: input
        });
      }
    });
  }

  // Rule: checkFormMethodPost
  function checkFormMethodPost(report) {
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      const method = (form.getAttribute('method') || '').toLowerCase();
      if (method !== 'post') {
        report({
          rule: 'checkFormMethodPost',
          message: '<form> tanpa method POST ditemukan. Hindari GET untuk data sensitif.',
          element: form
        });
      }
    });
  }

  // Rule: checkInlineScriptXSS
  function checkInlineScriptXSS(report) {
    const metaCSP = document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    if (!metaCSP) {
      const scripts = document.querySelectorAll('script');
      scripts.forEach(script => {
        if (!script.src && script.textContent.match(/[<>&"']/)) {
          report({
            rule: 'checkInlineScriptXSS',
            message: 'Inline script berpotensi XSS ditemukan dan CSP tidak aktif.',
            element: script
          });
        }
      });
    }
  }

  // QAstro.js - Auto-run modular accessibility & security linter


  const defaultRules = [
    checkTitle,
    checkImageAlt,
    checkFormLabel,
    checkNoInlineScript,
    checkNoInlineStyle,
    checkFormAutocomplete,
    checkMetaSecurity,
    checkPasswordAutocomplete,
    checkFormMethodPost,
    checkInlineScriptXSS
  ];

  function report(result) {
    const { rule, message, element } = result;
    if (element) {
      console.warn(`[QAstro] [${rule}] ${message}`, element);
    } else {
      console.warn(`[QAstro] [${rule}] ${message}`);
    }
  }

  function runQAstro({ rules = defaultRules } = {}) {
    rules.forEach(rule => {
      try {
        rule(report);
      } catch (e) {
        console.error(`[QAstro] Error in rule ${rule.name}:`, e);
      }
    });
  }

  // Auto-run on DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => runQAstro());
  } else {
    runQAstro();
  }

  exports.checkFormAutocomplete = checkFormAutocomplete;
  exports.checkFormLabel = checkFormLabel;
  exports.checkFormMethodPost = checkFormMethodPost;
  exports.checkImageAlt = checkImageAlt;
  exports.checkInlineScriptXSS = checkInlineScriptXSS;
  exports.checkMetaSecurity = checkMetaSecurity;
  exports.checkNoInlineScript = checkNoInlineScript;
  exports.checkNoInlineStyle = checkNoInlineStyle;
  exports.checkPasswordAutocomplete = checkPasswordAutocomplete;
  exports.checkTitle = checkTitle;
  exports.default = runQAstro;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=qastro.min.js.map
